function dn = dn_learn(dn, training_image, true_z)

dn.x.response = training_image(:);
for i = 1:dn.z.area_num
    dn.z.response{i} = zeros(size(dn.z.response{i}));
    dn.z.response{i}(true_z(i)) = 1;
end

% preprocess data

% compute responses
dn.y.bottom_up_response = compute_response(dn.x.response, ... 
                                           dn.y.bottom_up_weight, ... 
                                           dn.y.bottom_up_synapse_factor);
for i = 1:dn.z.area_num
    dn.y.top_down_response(i, :) = compute_response(dn.z.response{i}, ...
                                           dn.y.top_down_weight, ...
                                           dn.y.top_down_synapse_factor);
end

dn.y.pre_lateral_response = (dn.y.bottom_up_percent* dn.y.bottom_up_response + ...
                            dn.y.top_down_percent* mean(dn.y.top_down_response, 1)) / ...
                            (dn.y.bottom_up_percent + dn.y.top_down_percent);

dn.y.lateral_response = compute_response(dn.y.pre_lateral_response, ...
                                         dn.y.lateral_weight, ...
                                         dn.y.lateral_syanpse_factor);
dn.y.pre_response = (dn.y.bottom_up_percent + dn.y.top_down_percent) * ...
                    dn.y.pre_lateral_response + dn.y.lateral_percent * ...
                    dn.y.lateral_response;
                
% top-k competition for each neuron
dn.y.response = top_k_competition(dn.y.pre_response, dn.y.inhibit_weight, ...
                                  dn.y.inhibit_synapse_factor);